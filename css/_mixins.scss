// Mixins
// --------------------------
// 

/**
 * Slushman Mixins
 */

@mixin angled( $angle ) {
    transform: rotate( $angle );
    -webkit-transform: rotate($angle);
    -moz-transform: rotate($angle);
    -ms-transform: rotate($angle);
    -o-transform: rotate($angle);
    // filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
}
/**
 * Sets the appearance of an item
 *
 * Possible values:
 *     normal
 *     icon: like a small picture
 *     window: like a viewport
 *     button: like a button
 *     menu: set of options to choose from
 *     field: like an input field
 */
@mixin appearance( $type ) {
    appearance: $type;
    -moz-appearance: $type;
    -webkit-appearance: $type;
}

@mixin blur( $blur ) {
    -webkit-filter: blur( $blur ); 
    -moz-filter: blur( $blur ); 
    -o-filter: blur( $blur ); 
    -ms-filter: blur( $blur ); 
    filter: blur( $blur );
    filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='$blur');
}

@mixin boxsize( $value ) {
    -webkit-box-sizing: $value; /* Addresses box sizing set to border-box in S5, Chrome (include -moz to future-proof) */
    -moz-box-sizing:    $value;
    box-sizing:         $value;
}

@mixin center() {
    margin: 0 auto;
    text-align: center;
}

@mixin clearfix() {
    &:before, &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

/**
 * Responsive width
 *
 * This is based on a 12 column grid
 * Margin is constant: 1.666%
 *
 * @param   $quantity   How many total columns will there be
 * @param   $span       How many of grids should this span, default: 1
 */
@mixin column( $quantity, $span: 1, $margin: 1.6666666666667 ) {

    $margins: $quantity * ( $margin * 2 );
    $boxwidth: ( 100 - $margins ) / $quantity;
    $width: percentage( $boxwidth / 100 );

    @if ( $span > 1 ) {
        // $width: percentage( ( ( $boxwidth * $span ) - ( $margin * $span ) ) / 100 );
        $width: percentage( ( ( ( 100 / 12 ) * $span ) - ( $margin * 2 ) ) / 100 );
    }

    $marginperc: percentage( $margin / 100 );

    width: $width;
    float: left;
    margin-left: $marginperc;
    margin-right: $marginperc;
}

@mixin grayscale( $perc: 100% ) {

    @if $perc == none {

        filter: none;
        -webkit-filter: none;
        -moz-filter: none;
        -ms-filter: none;
        -o-filter: none; 

    } @else {

        /* Firefox 10+, Firefox on Android */
    //filter: url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\'><filter id=\'grayscale\'><feColorMatrix type=\'matrix\' values=\'0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\'/></filter></svg>#grayscale");

        /* Firefox 10+, Firefox on Android â€” svg filter*/
        //filter: url("data:image/svg+xml;utf8,<svg (none,="" 'xmlns',="" 'http:="" www.w3.org="" 2000="" xmlns="" ')="\'http://www.w3.org/2000/svg\'"><filter id="\'grayscale\'"><fecolormatrix 0="" 0.3333="" 0\'="" 1="" type="\'matrix\'" values="\'0.3333"></fecolormatrix></filter></svg>#grayscale");
        /* IE6-9 */ 
        filter: gray;

        filter: grayscale($perc); 
        -webkit-filter: grayscale($perc);
        -moz-filter: grayscale($perc);
        -ms-filter: grayscale($perc);
        -o-filter: grayscale($perc);   
    }
}

@mixin headers() {
    border: 0;
    font-style: inherit;
    font-weight: inherit;
    margin: 0;
    padding: 0;
    vertical-align: baseline;
    font-family: $header-font;
    clear: both;
}

@mixin hide() {
  display: none;
  visibility: hidden;
  height: 0;
  width: 0;
  min-height: 0;
  min-width: 0;
  max-height: 0;
  max-width: 0;
}

@mixin hoverActiveFocus($property, $value) {
    &:hover, &:active, &:focus {
        #{$property}: $value;
    }
}

@mixin icon($icon) {
    font-family: FontAwesome;
    font-weight: normal;
    font-style: normal;
    text-decoration: inherit;
    -webkit-font-smoothing: antialiased;
    *margin-right: .3em; // fixes ie7 issues
    content: $icon;
}

@mixin imagebg ( $bgpic, $retinapic:"", $repeat:no-repeat, $x:center, $y:center, $size:auto ) {
    background-image: url( $bgpic );
    background-repeat: $repeat;
    background-position: $x $y;
    background-size: $size;

    @if $retinapic != "" {
        @media (min--moz-device-pixel-ratio: 1.5),
           (-o-min-device-pixel-ratio: 3/2),
           (-webkit-min-device-pixel-ratio: 1.5),
           (min-device-pixel-ratio: 1.5),
           (min-resolution: 144dpi),
           (min-resolution: 1.5dppx) {
            background-image: url( #{$retinapic} );
        }
    }
}

@mixin radius( $radius ) {
    -webkit-border-radius:  $radius;
    -moz-border-radius:     $radius;
    border-radius:          $radius;
}

@mixin radiuscorners( $topleft, $topright, $botleft, $botright ) {
    -webkit-border-top-left-radius:     $topleft;
    -webkit-border-top-right-radius:    $topright;
    -webkit-border-bottom-right-radius: $botright;
    -webkit-border-bottom-left-radius:  $botleft;

    -moz-border-radius-topleft:     $topleft;
    -moz-border-radius-topright:    $topright;
    -moz-border-radius-bottomright: $botright;
    -moz-border-radius-bottomleft:  $botleft;

    border-top-left-radius:     $topleft;
    border-top-right-radius:    $topright;
    border-bottom-right-radius: $botright;
    border-bottom-left-radius:  $botleft;
}

@mixin shadow( $x, $y, $blur, $spread, $color: #333333, $type: "" ) {
    -moz-box-shadow: $x $y $blur $spread $color $type;
    -webkit-box-shadow: $x $y $blur $spread $color $type;
    box-shadow: $x $y $blur $spread $color $type;
    -ms-filter: "progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=90, Color='$color')";
    filter: progid:DXImageTransform.Microsoft.Shadow(Strength=4, Direction=90, Color='$color');
}

@mixin transform( $scale, $rotate, $transx, $transy, $skewx, $skewy ) {
    transform: scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
    -webkit-transform: scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
    -moz-transform: scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
    -ms-transform: scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
    -o-transform: scale($scale) rotate($rotate) translate($transx, $transy) skew($skewx, $skewy);
    // filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
}

@mixin translate( $x, $y ) {
    transform: translate($x, $y);
    -webkit-transform: translate($x, $y);
    -moz-transform: translate($x, $y);
    -ms-transform: translate($x, $y);
    -o-transform: translate($x, $y);
    // filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);
}



/**
 * Theme Specific Mixins
 */

@mixin lobster() {
	font-family: "Lobster Two";
}

@mixin tiza() {
	font-family: "Tiza";
}

@mixin aviano() {
    font-family: "AvianoSansRegular", Helvetica, sans-serif;
}

@mixin gothic() {
    font-family: "alternate_gothic_fs_no_2Rg", Helvetica, sans-serif;
}

@mixin footerboxes {
    padding: 0.5em;

    @media all and (min-width: $responsive2) {
        padding: 0;
    }
}

@mixin article($color) {
    border: 3px solid $color;

    .wp-post-image {
        border: 3px solid $darkgray;
    }
}

@mixin site_button() {
    text-align: center;
    padding: 0.5em 1em;
    background-color: $darkgray;
    border: 2px solid $lightgray;
    color: $light;
    text-decoration: none;

    &:hover,
    &:visited,
    &:active,
    &:focus {
        color: $light;
    }
    
    @include lobster();

    a {
        color: inherit;
        text-decoration: inherit;
        font-size: $h4;

        &:hover,
        &:visited,
        &:active,
        &:focus {
            color: inherit;
        }
    }
}